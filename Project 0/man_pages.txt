OPEN(2)                    Linux Programmer's Manual                   OPEN(2)

NAME
       open, creat - open and possibly create a file or device

SYNOPSIS
       #include <sys/types.h>
       #include <sys/stat.h>
       #include <fcntl.h>

       int open(const char *pathname, int flags);
       int open(const char *pathname, int flags, mode_t mode);

       int creat(const char *pathname, mode_t mode);

DESCRIPTION
      Given a pathname for a file, open() returns a file descriptor, a small,
      nonnegative integer  for  use  in  subsequent  system  calls  (read(2),
      write(2), lseek(2), fcntl(2), etc.).  The file descriptor returned by a
      successful call will be the lowest-numbered file  descriptor  not  cur‐
      rently open for the process.

======

CLOSE(2)                   Linux Programmer's Manual                  CLOSE(2)

NAME
       close - close a file descriptor

SYNOPSIS
       #include <unistd.h>

       int close(int fd);

DESCRIPTION
      close()  closes  a  file descriptor, so that it no longer refers to any
      file and may be reused.  Any record locks (see fcntl(2))  held  on  the
      file  it  was  associated  with,  and owned by the process, are removed
      (regardless of the file descriptor that was used to obtain the lock).

======

DUP(2)                     Linux Programmer's Manual                    DUP(2)

NAME
       dup, dup2, dup3 - duplicate a file descriptor

SYNOPSIS
       #include <unistd.h>

       int dup(int oldfd);
       int dup2(int oldfd, int newfd);

       #define _GNU_SOURCE             /* See feature_test_macros(7) */
       #include <fcntl.h>              /* Obtain O_* constant definitions */
       #include <unistd.h>

       int dup3(int oldfd, int newfd, int flags);

DESCRIPTION
       These system calls create a copy of the file descriptor oldfd.

======

READ(2)                    Linux Programmer's Manual                   READ(2)

NAME
       read - read from a file descriptor

SYNOPSIS
       #include <unistd.h>

       ssize_t read(int fd, void *buf, size_t count);

DESCRIPTION
       read()  attempts to read up to count bytes from file descriptor fd into
       the buffer starting at buf.

======

STRERROR(3)                Linux Programmer's Manual               STRERROR(3)

NAME
       strerror, strerror_r - return string describing error number

SYNOPSIS
       #include <string.h>

       char *strerror(int errnum);

       int strerror_r(int errnum, char *buf, size_t buflen);
                   /* XSI-compliant */

       char *strerror_r(int errnum, char *buf, size_t buflen);
                   /* GNU-specific */

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       The XSI-compliant version of strerror_r() is provided if:
       (_POSIX_C_SOURCE >= 200112L || _XOPEN_SOURCE >= 600) && ! _GNU_SOURCE
       Otherwise, the GNU-specific version is provided.

DESCRIPTION

The  strerror()  function  returns a pointer to a string that describes
the error code passed  in  the  argument  errnum,  possibly  using  the
LC_MESSAGES  part  of the current locale to select the appropriate lan‐
guage.  (For example, if errnum is  EINVAL,  the  returned  description
will  "Invalid  argument".)   This  string  must not be modified by the
application, but may be modified by a subsequent  call  to  strerror().
No library function, including perror(3), will modify this string.

======

GETOPT(3)                  Linux Programmer's Manual                 GETOPT(3)

NAME
       getopt, getopt_long, getopt_long_only, optarg, optind, opterr, optopt -
       Parse command-line options

SYNOPSIS
       #include <unistd.h>

       int getopt(int argc, char * const argv[],
                  const char *optstring);

       extern char *optarg;
       extern int optind, opterr, optopt;

       #include <getopt.h>

       int getopt_long(int argc, char * const argv[],
                  const char *optstring,
                  const struct option *longopts, int *longindex);

       int getopt_long_only(int argc, char * const argv[],
                  const char *optstring,
                  const struct option *longopts, int *longindex);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       getopt(): _POSIX_C_SOURCE >= 2 || _XOPEN_SOURCE
       getopt_long(), getopt_long_only(): _GNU_SOURCE

DESCRIPTION
       The getopt() function parses the command-line arguments.  Its arguments
       argc  and argv are the argument count and array as passed to the main()
       function on program invocation.  An element of argv  that  starts  with
       '-' (and is not exactly "-" or "--") is an option element.  The charac‐
       ters of this element (aside from the initial '-')  are  option  charac‐
       ters.   If  getopt() is called repeatedly, it returns successively each
       of the option characters from each of the option elements.

======

Other sources:
https://www.gnu.org/software/libc/manual/html_node/Example-of-Getopt.html#Example-of-Getopt
https://www.gnu.org/software/libc/manual/html_node/Getopt-Long-Option-Example.html
http://www.techytalk.info/linux-system-programming-open-file-read-file-and-write-file/
http://www.unknownroad.com/rtfm/gdbtut/gdbsegfault.html
